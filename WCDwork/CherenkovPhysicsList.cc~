//Bradley Manning 8/2017

#include "G4ios.hh"
#include <iomanip>

#include "globals.hh"
#include "CherenkovPhysicsList.hh"
#include "CherenkovPhysicsListMessenger.hh"

#include "G4ParticleDefinition.hh"
#include "G4ParticleTypes.hh"
#include "G4ParticleTable.hh"

#include "G4Material.hh"
#include "G4MaterialTable.hh"

#include "G4ProcessManager.hh"
#include "G4ProcessVector.hh"

#include "G4Cerenkov.hh"

// May need to include
// #include "G4OpAbsorption.hh"
// #include "G4OpRayleight.hh"
// #include "G4OpBoundaryProcess.hh"

CherenkovPhysicsList::CherenkovPhysicsList() : G4VUserPhysicsList()
{
  cherenkovProcess = 0;



  pMessenger = new CherenkovPhysicsListMessenger(this);
  SetVerboseLevel(0);
}

CherenkovPhysicsList::~CherenkovPhysicsKust() {delete pMessenger;}


void CherenkovPhysicsList::ConstructParticle()
{
  //Necessary to describe interactions of following particles
  ConstructBosons();
  ConstructLeptons();
  ConstructMesons();
  ConstructBaryons();
}

void CherenkovPhysicsList::ConstructBosons()
{
  // G4 pseudo-particles
  G4Geantino::GeantinoDefinition();
  G4ChargedGeantino::ChargedGeantinoDefinition();

  // gamma
  G4Gamma::GammaDefinition();

  // optical photon
  G4OpticalPhoton::OpticalPhotonDefinition();
}

void CherenkovPhysicsList::ConstructLeptons()
{
  // leptons
  G4Electron::ElectronDefinition();
  G4Positron::PositronDefinition();
  G4NeutrinoE::NeutrinoEDefinition();
  G4AntiNeutrinoE::AntiNeutrinoEDefinition();
  G4MuonPlus::MuonPlusDefinition();
  G4MuonMinus::MuonMinusDefinition();
  G4NeutrinoMu::NeutrinoMuDefinition();
  G4AntiNeutrinoMu::AntiNeutrinoMuDefinition();
}

void CherenkovPhysicsList::ConstructMesons()
{
  G4PionPlus::PionPlusDefinition();
  G4PionMinus::PionMinusDefinition();
  G4PionZero::PionZeroDefinition();
}

void CherenkovPhysicsList::ConstructBaryons()
{
  G4Proton::ProtonDefinition();
  G4AntiProton::AntiProtonDefinition();
  G4Neutron::NeutronDefinition();
  G4AntiNeutron::AntiNeutronDefinition();
}

void CherenkovPhysicsList::ConstructProcess()
{
  AddTransportation();
  ConstructGeneral();
  ConstructEM();
  ConstructOp();
}

// May not be necessary, included for accuracy
#include "G4Decay.hh"

void CherenkovPhysicsList::ConstructGeneral()
{
  //Add Decay Process
  G4Decay* decayProcess = new G4Decay();
  theParticleIterator->reset();
  while( (*theParticleIterator)() ) {
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    if (decayProcess->IsApplicable(*particle)) {
      pmanager->AddProcess(decayProcess);
      //This sets the ordering of the process
      pmanager->SetProcessOrdering(decayProcess, idxPostStep);
      pmanager->SetProcessORdering(decayProcess, idxAtRest);
    }
  }
}

//Other necessary physics effects

#include "G4ComptonScattering.hh"
#include "G4GammaConversion.hh"
#include "G4PhotoElectricEffect.hh"
#include "G4MultipleScattering.hh"

#include "G4eIonisation.hh"
#include "G4eBremsstrahlung.hh"
#include "G4eplusAnnihilation.hh"

#include "G4MuIonisation.hh"
#include "G4MuBremsstrahlung.hh"
#include "G4MuPairProduction.hh"

#include "G4hIonisation.hh"

//Construct Electromagnetic Processes

void CherenkovPhysicsList::ConstructEM()
{
  theParticleIterator->reset();
  while( (*theParticleIterator)() ){
    G4ParticleDefinition* particle = theParticleIterator->value();
    G4ProcessManager* pmanager = particle->GetProcessManager();
    G4String particleName = particle->GetParticleName();

    if (particleName == "gamma") {
      //Construct processes for gamma
      pmanager->AddDiscreteProcess(new G4GammaConversion());//, -1, 1, 1);
      pmanager->AddDiscreteProcess(new G4ComptonScattering());//, -1, 2, 2);
      pmanager->AddDiscreteProcess(new G4PhotoElectricEffect());//, -1, 3, 3);
    } else if (particleName == "e-") {
      //Construct processes for electron
      //Numbers imply the order of the processes, negative number means it is inactive at given stage
      pmanager->AddProcess(new G4MultipleScattering(), -1, 1, 1);
      pmanager->AddProcess(new G4eIonisation(), -1, 2, 2);
      pmanager->AddProcess(new G4eBremsstrahlung(), -1, 3, 3);
    } else if (particleName == "e+") {
      //Construct processes for positron
      pmanager->AddProcess(new G4MultipleScattering(), -1, 1, 1);
      pmanager->AddProcess(new G4eIonisation(), -1, 2, 2);
      pmanager->AddProcess(new G4eBremsstrahlung(), -1, 3, 3);
      pmanager->AddProcess(new G4eplusAnnihilation(), 0, -1, 4);

    } else if (particleName == "mu+" || particleName == "mu-" ) {
      //Construct processes for muon+,muon-
      pmanager->AddProcess(new G4MultipleScattering(), -1, 1, 1);
      pmanager->AddProcess(new G4MuIonisation(), -1, 2, 2);
      pmanager->AddProcess(
				
  

					   
